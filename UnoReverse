#include <winsock2.h>
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void get_geolocation(const char* ip, char* response, size_t max_len) {
    SOCKET sock;
    struct sockaddr_in server;
    char request[512], buffer[1024];
    int bytes;

    sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock == INVALID_SOCKET) return;

    server.sin_family = AF_INET;
    server.sin_port = htons(80);

    struct hostent* he = gethostbyname("ip-api.com");
    if (he == NULL) {
        closesocket(sock);
        return;
    }
    memcpy(&server.sin_addr, he->h_addr_list[0], he->h_length);

    if (connect(sock, (struct sockaddr*)&server, sizeof(server)) < 0) {
        closesocket(sock);
        return;
    }

    snprintf(request, sizeof(request),
             "GET /json/%s HTTP/1.1\r\nHost: ip-api.com\r\nConnection: close\r\n\r\n",
             ip);
    send(sock, request, strlen(request), 0);

    size_t total = 0;
    response[0] = '\0';
    while ((bytes = recv(sock, buffer, sizeof(buffer) - 1, 0)) > 0 && total < max_len - 1) {
        buffer[bytes] = '\0';
        strncat(response, buffer, max_len - strlen(response) - 1);
        total += bytes;
    }

    closesocket(sock);
}

DWORD WINAPI handle_client(LPVOID socket_desc) {
    SOCKET client_socket = *(SOCKET*)socket_desc;
    free(socket_desc);

    struct sockaddr_in addr;
    int addr_len = sizeof(addr);
    getpeername(client_socket, (struct sockaddr*)&addr, &addr_len);
    char *ip = inet_ntoa(addr.sin_addr);

    FILE *logfile = fopen("log.txt", "a");
    if (!logfile) {
        closesocket(client_socket);
        return 1;
    }

    fprintf(logfile, "Nieuwe verbinding van: %s\n", ip);
    fflush(logfile);

    fprintf(logfile, "[HTTP-client gestart voor %s]\n", ip);
    fflush(logfile);

    char geo_response[4096] = {0};
    get_geolocation(ip, geo_response, sizeof(geo_response));
    fprintf(logfile, "Geolocatie voor %s:\n%s\n", ip, geo_response);
    fflush(logfile);

    char buffer[1024];
    int bytes;
    while ((bytes = recv(client_socket, buffer, sizeof(buffer) - 1, 0)) > 0) {
        buffer[bytes] = '\0';
        fprintf(logfile, "Van %s: %s\n", ip, buffer);
        fflush(logfile);

        const char *payload = "UNO REVERSE CARD ACTIVATED!\n";
        for (int i = 0; i < 1000; i++) {
            send(client_socket, payload, strlen(payload), 0);
        }
        fprintf(logfile, "Uno Reverse uitgevoerd (%d bytes teruggestuurd).\n", 1000 * (int)strlen(payload));
        fflush(logfile);
    }

    fprintf(logfile, "Client %s heeft de verbinding verbroken.\n", ip);
    fclose(logfile);
    closesocket(client_socket);
    return 0;
}

int main() {
    WSADATA wsa;
    SOCKET server_socket;
    struct sockaddr_in server, client;
    int c = sizeof(struct sockaddr_in);

    printf("Initialiseer Winsock...\n");
    if (WSAStartup(MAKEWORD(2,2), &wsa) != 0) {
        printf("WSAStartup mislukt. Code: %d\n", WSAGetLastError());
        return 1;
    }

    if ((server_socket = socket(AF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET) {
        printf("Kan socket niet aanmaken. Code: %d\n", WSAGetLastError());
        return 1;
    }

    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(22); 

    if (bind(server_socket, (struct sockaddr*)&server, sizeof(server)) == SOCKET_ERROR) {
        printf("Bind mislukt. Code: %d\n", WSAGetLastError());
        return 1;
    }

    listen(server_socket, 5);
    printf("Server luistert op poort %d...\n", ntohs(server.sin_port));

    while (1) {
        SOCKET *new_sock = malloc(sizeof(SOCKET));
        if (!new_sock) {
            printf("Malloc mislukt\n");
            break;
        }
        *new_sock = accept(server_socket, (struct sockaddr*)&client, &c);
        if (*new_sock == INVALID_SOCKET) {
            printf("Accept mislukt. Code: %d\n", WSAGetLastError());
            free(new_sock);
            continue;
        }

        CreateThread(NULL, 0, handle_client, (void*)new_sock, 0, NULL);
    }

    closesocket(server_socket);
    WSACleanup();
    return 0;
}
