#include <winsock2.h>
#include <windows.h>
#include <ws2tcpip.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

typedef struct {
    SOCKET client_sock;
    struct sockaddr_in client_addr;
} client_info_t;

void log_line(const char* line) {
    FILE* log = fopen("uno_reverse.log", "a");
    if (!log) return;
    fprintf(log, "%s\n", line);
    fclose(log);
}

void get_geolocation(const char* ip, char* response, size_t max_len) {
    SOCKET sock;
    struct sockaddr_in server;
    char request[512], buffer[1024];
    int bytes;

    sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock == INVALID_SOCKET) return;

    server.sin_family = AF_INET;
    server.sin_port = htons(80);
    server.sin_addr.s_addr = inet_addr("1.1.1.1"); 

    struct hostent* he = gethostbyname("ip-api.com");
    if (he == NULL) {
        closesocket(sock);
        return;
    }
    memcpy(&server.sin_addr, he->h_addr_list[0], he->h_length);

    if (connect(sock, (struct sockaddr*)&server, sizeof(server)) < 0) {
        closesocket(sock);
        return;
    }

    snprintf(request, sizeof(request),
             "GET /json/%s HTTP/1.1\r\nHost: %s\r\nConnection: close\r\n\r\n",
             ip, "ip-api.com");
    send(sock, request, strlen(request), 0);

    size_t total = 0;
    while ((bytes = recv(sock, buffer, sizeof(buffer) - 1, 0)) > 0 && total < max_len - 1) {
        buffer[bytes] = '\0';
        strncat(response, buffer, max_len - strlen(response) - 1);
        total += bytes;
    }

    closesocket(sock);
}

void extract_json_value(const char* json, const char* key, char* output, size_t len) {
    char search[64];
    snprintf(search, sizeof(search), "\"%s\":\"", key);
    char* start = strstr(json, search);
    if (start) {
        start += strlen(search);
        char* end = strchr(start, '"');
        if (end && (end - start) < len) {
            strncpy(output, start, end - start);
            output[end - start] = '\0';
        }
    }
}

DWORD WINAPI client_thread(LPVOID param) {
    client_info_t* client = (client_info_t*)param;
    SOCKET sock = client->client_sock;
    struct sockaddr_in addr = client->client_addr;
    char ip[INET_ADDRSTRLEN];
    char buffer[1024] = {0};
    char log_msg[2048] = {0};
    char geo_response[4096] = {0};
    char country[64] = "onbekend";
    char city[64] = "onbekend";

    strcpy(ip, inet_ntoa(addr.sin_addr));
    int received = recv(sock, buffer, sizeof(buffer) - 1, 0);
    buffer[received > 0 ? received : 0] = '\0';

    get_geolocation(ip, geo_response, sizeof(geo_response));
    extract_json_value(geo_response, "country", country, sizeof(country));
    extract_json_value(geo_response, "city", city, sizeof(city));

    time_t now = time(NULL);
    struct tm* t = localtime(&now);
    snprintf(log_msg, sizeof(log_msg),
             "[%04d-%02d-%02d %02d:%02d:%02d] IP: %s | Data: %s | Land: %s | Stad: %s",
             t->tm_year + 1900, t->tm_mon + 1, t->tm_mday,
             t->tm_hour, t->tm_min, t->tm_sec,
             ip, buffer, country, city);
    log_line(log_msg);

    char* payload = malloc(10000000);
    if (payload) {
        memset(payload, 'A', 10000000);
        size_t total_sent = 0;
        while (total_sent < 10000000) {
            int sent = send(sock, payload + total_sent, 10000000 - total_sent, 0);
            if (sent <= 0) break;
            total_sent += sent;
        }
        free(payload);

        snprintf(log_msg, sizeof(log_msg),
                 "[%s] Verzonden bytes: %zu naar %s",
                 buffer, total_sent, ip);
        log_line(log_msg);
    }

    closesocket(sock);
    free(client);
    return 0;
}

int main() {
    WSADATA wsaData;
    SOCKET server_sock;
    struct sockaddr_in server_addr, client_addr;
    int addr_len = sizeof(client_addr);

    WSAStartup(MAKEWORD(2, 2), &wsaData);

    server_sock = socket(AF_INET, SOCK_STREAM, 0);
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(22);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(server_sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) == SOCKET_ERROR) {
        printf("Bind mislukt\n");
        return 1;
    }

    listen(server_sock, 10);
    printf("UnoReverse draait op poort %d\n", 22);

    while (1) {
        SOCKET client_sock = accept(server_sock, (struct sockaddr*)&client_addr, &addr_len);
        client_info_t* info = malloc(sizeof(client_info_t));
        info->client_sock = client_sock;
        info->client_addr = client_addr;

        CreateThread(NULL, 0, client_thread, info, 0, NULL);
    }

    closesocket(server_sock);
    WSACleanup();
    return 0;
}
